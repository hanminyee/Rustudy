/*
이번 파트는 약간은 추상적인 개념들에 대해서 알아볼 것이다.
패키지, 크레이트, 모듈 등과같은 것들을 알아볼 것인데 어찌보면 코드 짜는 것 보다 더 중요함.
왜냐면 이것들은 코드의 유지, 보수, 코드의 정리, 협업 과 같이 개발자에게 필수적인 요소들을 다루기 때문.
집중해서 봐보자.

지금까지 우리가 작성했던 프로그램들은 하나의 파일에 하나의 모듈로 구성되어있음.
하지만 프로젝트가 커지면 코드를 여러개의 파일과 모듈로 나누어 관리해야함.
패키지는 여러개의 바이너리 크레이트를 포함할 수 있고, 한개의 라이브러리 크레이트도 추가할 수 있다.
패키지의 크기가 커지면 일정 부분을 다른 크레이트로 옮겨 외부 의존성으로 추가할 수 있음.
뭔소리냐 이게?
제대로 알아보자.

우선 기본개념을 잡고 가자.
"범위"란?
일종의 중첩된 컨텍스트로 특정 "범위" 안에 작성된 코드는 그 범위 내에서만 유효한 여러가지 이름을 사용함.
코드를 읽고 쓰고 컴파일 할 때 프로그래머와 컴파일러는 특정 지점의 특정 이름이 변수, 함수, 구조체, 열거자, 모듈, 상수 혹은 다른 아이템 중 어떤 것을 의미하는지 알아야함.
이때 범위를 생성해서 이런 이름들이 범위 안, 혹은 바깥에 위치하도록 변경할 수 있음.
같은 범위 안에서는 같은 이름을 갖는 아이템을 정의할 수 없음. 또한 이름 충돌을 해결할 수 있는 도구도 존재함.

러스트는 코드의 구조를 관리하기 위해 몇가지 기능을 제공함.
이 기능을 이용해 어떤 부분을 외부에 노출할지, 어떤 부분을 비공개로 숨길지, 그리고 프로그램이 사용하는 이름들이 어떤 범위 안에 존재하는지 등을 결정할 수 있음.
떄로는 이런 기능들을 합쳐서 모듈 시스템이라고 부름
모듈 시스템은 아래와 같은 기능들을 제공함.
1. 패키지 : 크레이트를 빌드, 테스트, 공유할 수 있는 카고의 기능
2. 크레이트 : 라이브러리나 실행파일을 생성하는 모듈의 트리
3. 모듈과 use : 코드의 구조와 범위, 그리고 경로의 접근성을 제어하는 기능
4. 경로 : 구조체, 함수, 모듈 등의 이름을 결정하는 방식

이번장은 위의 시스템에 대해 설명하고 이 기능들에 대해서도 살펴볼 예정이다.
이번장을 마치면 개발자소리 들을 수 있을지도?!
*/
