fn main(){
    let s1 = String:: from("hello");

    let len = calculate_length(&s1);

    println!("{}의 길이는 {}입니다.", s1, len);
}

fn calculate_length(s: &String) -> usize{
    s.len()
}

/*
위 코드는 값의 소유권을 가져오는 것이 아닌, 매개변수로 전달된 객체의 참조를 이용하도록 한 것이다.
참조란 '&'기호이다. 이 기호를 이용하면 소유권을 가져오지 않고도 값을 참조할 수 있다.
즉, calculate_length에서 파라미터로 받는 s가 s1의 3요소(포인터, 길이, 용량)중 포인터를 가리킨다. 그러면 s1포인터가 가리키고 있는 실제 값들에 접근할 수 있다.

함수를 호출하는 부분을 보자. 4번째 줄에서 calculate_lentgh(&s1)을 통해 함수에 참조형을 이용한 것을 볼 수 있다.
함수 내에서 s1변수의 값은 읽을 수 있지만, 소유권은 가져오지 않는 참조를 생성하는 것이다.
참조는 소유권을 가지지 않기 때문에 참조가 가리키는 값은 참조가 범위를 벗어나더라도(함수가 실행이 끝나더라도) drop함수가 호출되지 않는다.

이번엔 함수 자체를 보자. 함수 자체에서도 받을 때 참조형으로 받는다고 표시를 해줘야한다. 그래서 받는 파라미터의 형을 지정할 때 앞에 &를 붙이는 것이다.
변수 s(함수 파라미터)가 유효한 범위는 함수 매개변수의 범위와 같지만, 소유권이 없으므로 범위를 벗어나더라도 변수가 가리키는 참조의 drop함수가 호출 안됨.
심지어 소유권을 돌려주기 위해 따로 받았던걸 다시 리턴할 필요도 없음.

이러한 방법(참조를 전달하는 것)을 "대여"라고 함. 
근데 대여한 변수를 변경하려고 하면 어떻게 될까?

기본적으로 대여한 변수도 불변이다. 근데 "가변참조"를 이용하면 가능함. 그건 다음장에.
*/
